
#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <map>
#include <algorithm>
#include <numeric>

using namespace std;

// цкнаюкэмше оепелеммше
//------------------------
ofstream VseSdelki;	// дкъ гюохях бяеу ядекнй
ofstream PS; // дкъ гюохях хрнцнб он ярпюрецхх
string AdresLenta; // юдпея кемрш
float DopProsadka = 0; // онйюгюрекэ дносярхлни опняюдйх, %
float DopUbitSdel = 0; // онйюгюрекэ люйяхлюкэмнцн сашрйю он ядекйе, %
float GarantObesp = 0; // цюпюмрхимне наеяоевемхе гю йнмрпюйр, пса
float ShagCeni = 0; // ьюц жемш
float StoimShagCeni = 0; // ярнхлнярэ ьюцю жемш
int KolMesyacev = 0; // йнкхвеярбн леяъжеб дкъ нопедекемхъ люйяхлюкэмнцн назелю
int KolDnei = 0; // йнкхвеярбн дмеи (оНДЯВХРШБЮЕРЯЪ Б Т-ХХ ContTochki)
char Strategi = '0'; // бшбндхрэ йнмйпермсч ярпюрецхч хкх бяе, Y/N
// еякх бшбндхряъ йнмйпермюъ ярпюрецхъ
int Polz_Sniat = 0; // онйюгюрекэ ямърхъ
int Polz_otkr = 0; // онйюгюрекэ нрйпшрхъ
int Polz_ubit = 0; // онйюгюрекэ гюйпшрхъ я сашрйнл
int Polz_kolVol = 0; // йнкхвеярбн назелнб
//------------------------

class Svecha	// йкюяя дкъ гюохях ябевх
{
public:
	char Period; // оепхнд ябевх
	string Tiker; // рхйеп
	int Date = 0; // дюрю
	short int Time = 0; // бпелъ
	float Open = 0.0f; // нрйпшрхе
	float High = 0.0f; // люйяхлсл
	float Low = 0.0f; // лхмхлсл
	float Close = 0.0f; // гюйпшрхе
	int Vol = 0; // назел
	unsigned int God = 0; // цнд
	unsigned int Mes = 0; // леяъж
	unsigned int Den = 0;			// демэ
	unsigned int Chas = 0;			// вюя
	unsigned int Min = 0;	// лхмсрю
	float KoefPer = 0.0f;	// йнщттхжхемр оепеяверю опх ялеме рхйепю
	list<Svecha> next;
	void ZapPokaz(char period)	// нопедекемхе онйюгюрекеи б гюбхяхлнярх нр оепхндю ябевх
	{
		if (period == 'в')	// вюя
		{
			this->Tiker = this->next.back().Tiker; // 
			this->Chas = this->next.back().Chas; // 
			this->Den = this->next.back().Den; // 
			this->Mes = this->next.back().Mes; // 
		}
		else if (period == 'д')	// демэ
		{
			this->Tiker = this->next.back().Tiker; // 
			this->Den = this->next.back().Den; // 
			this->Mes = this->next.back().Mes; // 
		}
		else if (period == 'л')	// леяъж
		{
			this->Mes = this->next.back().Mes; // 
		}
		this->Period = period; // цнд
		this->God = this->next.back().God; // 

		this->Open = this->next.front().Open; // нрйпшрхе
		this->Close = this->next.back().Close; // гюйпшрхе
		this->High = (*max_element(this->next.begin(), this->next.end(), [](Svecha& el1, Svecha& el2)
			{
				return el1.High < el2.High;
			})).High; // люйяхлсл
		this->Low = (*max_element(this->next.begin(), this->next.end(), [](Svecha& el1, Svecha& el2)
			{
				return el1.Low > el2.Low;
			})).Low; // лхмхлсл
		this->Vol = accumulate(this->next.begin(), this->next.end(), 0, [](int el1, Svecha& el2)
			{
				return el1 + el2.Vol;
			}); // назел
	}
};
class Svecha_30	// ябевю 30 лхмср дкъ нопедекемхъ рнвйх бундю
{
public:
	string Tiker;
	int Date;
	int TimeN; // бпелъ нрйпшрхъ ябевх
	int TimeK; // бпелъ гюйпшрхъ ябевх
	float Open; // 
	float Close; // 
	int Vol; // 
	char Oper; // ноепюжхъ рнвйх бундю
	short int Mes; // леяъж
	float izm_5; // хглемемхе оепбни оърхлхмсрйх
	float KoefPer = 0.0f; // йнщттхжхемр оепеяверю
};
class Tochka // рнвйю бундю
{
public:
	string Tiker = "0"; // рхйеп
	int Date = 0; // дюрю
	int TimeN = 0; // бпелъ нрйпшрхъ ябевх
	int TimeK = 0; // бпелъ гюйпшрхъ ябевх
	float Open = 0.0f; // нрйпшрхе
	float Close = 0.0f; // гюйпшрхе
	float KoefPerS = 0.0f; // йнщттхжхемр оепеяверю опх ялеме рхйепю
	char Oper; // ноепюжхъ бундю
	int Vol = 0; // назел
	float izm_5 = 0; // хглемемхе оепбни оърхлхмсрйх
	float PokKill = 0.0f; // онйюгюрекэ ямърхъ гюъбйх
	float PokOpen = 0.0f; // онйюгюрекэ нрйпшрхъ
	float PokClose = 0.0f; // онйюгюрекэ гюйпшрхъ я сашрйнл
	string TikerOpen = "0"; // рхйеп нрйпшрхъ
	int DateOpen = 0; // дюрю нрйпшрхъ
	int TimeOpen = 0; // бпелъ нрйпшрхъ
	float PriceOpen = 0.0f; // жемю нрйпшрхъ
	float KoefPerOpen = 0.0f; // йнщттхжхемр оепеяверю жемш нрйпшрхъ
	string TikerKill = "0"; // рхйеп ямърхъ
	int DateKill = 0; // дюрю ямърхъ
	int TimeKill = 0; // бпелъ ямърхъ
	float PriceKill = 0.0f; // жемю ямърхъ
	float KoefPerKill = 0.0f; // йнщттхжхемр оепеяверю жемш ямърхъ
	string TikerCloseU = "0"; // рхйеп гюйпшрхъ я сашрйнл
	int DateCloseU = 0; // дюрю гюйпшрхъ я сашрйнл
	int TimeCloseU = 0; // бпелъ гюйпшрхъ я сашрйнл
	float PriceCloseU = 0.0f; // жемю гюйпшрхъ я сашрйнл
	float KoefPerCloseU = 0.0f; // йнщттхжхемр оепеяверю жемш гюйпшрхъ я сашрйнл
	string TikerCloseP = "0"; // рхйеп гюйпшрхъ я опхашкэч
	int DateCloseP = 0; // дюрю гюйпшрхъ я опхашкэч
	int TimeCloseP = 0; // бпелъ гюйпшрхъ я опхашкэч
	float PriceCloseP = 0.0f; // жемю гюйпшрхъ я опхашкэч
	float KoefPerCloseP = 0.0f; // йнщттхжхемр оепеяверю жемш гюйпшрхъ я опхашкэч
	char Sostoyanie; // янярнъмхе (ямърю/нрйпшрю)
	float Rezult = 0.0f; // пегскэрюр (опхашкэ/сашрнй)
	float PoprPriceOpen = 0.0f; // онопюбйю жемш нрйпшрхъ мю пюгмхжс лефдс жемни ядекйх х люйя/лхм жемш ябевйх (гюйкюршбюеряъ усдьюъ жемю ядекйх гю лхмсрс)
	float PoprPriceCloseU = 0.0f; // онопюбйю жемш гюйпшрхъ я сашрйнл мю пюгмхжс лефдс жемни ядекйх х люйя/лхм жемш ябевйх (гюйкюршбюеряъ усдьюъ жемю ядекйх гю лхмсрс)
	float PoprPriceCloseP = 0.0f; // онопюбйю жемш гюйпшрхъ я опхашкэч мю пюгмхжс лефдс жемни ядекйх х люйя/лхм жемш ябевйх (гюйкюршбюеряъ усдьюъ жемю ядекйх гю лхмсрс)
	string Koment; // йнлемрюпхи

	Tochka()
	{
	}
	Tochka(Svecha_30& s) // гюохяэ онйюгюрекеи рнвйх хг ябевх 30 лхм.
	{
		this->Tiker = s.Tiker;
		this->Date = s.Date;
		this->TimeN = s.TimeN;
		this->TimeK = s.TimeK;
		this->Open = s.Open;
		this->Close = s.Close;
		this->Vol = s.Vol;
		this->Oper = s.Oper;
		this->izm_5 = s.izm_5;
		this->KoefPerS = s.KoefPer;
	}
	unsigned int GetVremia(char period, char deistvie) // бнгбпюыюер бпелъ б гюбхяхлнярх нр оепхндю
	{						// deistvie - бпелъ ябевх, periol - оепхнд		
		switch (deistvie)
		{
		case 'S': // бпелъ ябевх
			if (period == 'р') // тнплюр бпелемх дн лхмсрш
			{
				return this->Date * 10000 + this->TimeK;
			}
			if (period == 'в') // дн вюяю
			{
				return this->Date * 100 + this->TimeK / 100;
			}
			if (period == 'д') // дн дмъ
			{
				return this->Date;
			}
			if (period == 'л') // дн леяъжю
			{
				return this->Date / 100;
			}
			if (period == 'ц') // дн цндю
			{
				return this->Date / 10000;
			}
			return -1;
		case 'O': // бпелъ нрйпшрхъ
			if (period == 'р')
			{
				return this->DateOpen * 10000 + this->TimeOpen;
			}
			if (period == 'в')
			{
				return this->DateOpen * 100 + this->TimeOpen / 100;
			}
			if (period == 'д')
			{
				return this->DateOpen;
			}
			if (period == 'л')
			{
				return this->DateOpen / 100;
			}
			if (period == 'ц')
			{
				return this->DateOpen / 10000;
			}
			return -1;
		case 'U': // бпелъ гюйпшрхъ я сашрйнл
			if (period == 'р')
			{
				return this->DateCloseU * 10000 + this->TimeCloseU;
			}
			return -1;
		}
		return -1;
	}
	void OprSostoyanie()	// нопедекхрэ янярнъмхе рнвйх бундю, хяонкмемю хкх ямърю
	{			// он дюре ямърхъ х нрйпшрхъ ядекйх
		if (this->DateOpen)
		{
			if (this->DateKill)
			{
				if ((unsigned int)(this->DateKill) * 10000 + this->TimeKill < (unsigned int)(this->DateOpen) * 10000 + this->TimeOpen)
				{
					this->Sostoyanie = 'K'; // 
				}
				else
				{
					this->Sostoyanie = 'I'; // 
				}
			}
			else
			{
				this->Sostoyanie = 'I'; // 
			}
		}
		else
		{
			this->Sostoyanie = 'K'; // 
		}
	}
	void CalcRezult()	// ондахрэ пегскэрюр ядекйх
	{			// б гюбхяхлнярх нр мюопюбкемхъ я свернл онопюбйх мю усдьсч жемс ядекйх
		switch (Oper)
		{
		case 'B':
			if (DateCloseP)
			{
				Rezult = (PriceCloseP - PriceOpen + PoprPriceOpen + PoprPriceCloseP) * StoimShagCeni / ShagCeni; // 
			}
			else
			{
				Rezult = (PriceCloseU - PriceOpen + PoprPriceOpen + PoprPriceCloseU) * StoimShagCeni / ShagCeni; // 
			}
			break; // 
		case 'S':
			if (DateCloseP)
			{
				Rezult = (PriceOpen - PriceCloseP + PoprPriceOpen + PoprPriceCloseP) * StoimShagCeni / ShagCeni; // 
			}
			else
			{
				Rezult = (PriceOpen - PriceCloseU + PoprPriceOpen + PoprPriceCloseU) * StoimShagCeni / ShagCeni; // 
			}
			break; // 
		}
	}
};
void Nastroika()	// мюярпнийю пюанрш опнцпюллш хг тюикю
{
	ifstream FileNastr("мЮЯРПНИЙЮ.txt"); // юпея тюикю мюярпнийх
	FileNastr >> AdresLenta; // юдпея тюикнб рнпцнб
	FileNastr >> DopProsadka; // дносярхлюъ опняюдйю
	FileNastr >> DopUbitSdel; // дносярхлши сашрнй гю ядекйс
	FileNastr >> GarantObesp; // цюпюмрхимне наеяоевемхе гю йнмрпюйр
	FileNastr >> ShagCeni; // ьюц жемш йнмрпюйрю
	FileNastr >> StoimShagCeni; // ярнхлнярэ ьюцю жемш
	FileNastr >> KolMesyacev; // йнкхвеярбн леяъжеб дкъ нопедекемхъ люйяхлюкэмнцн назелю
	FileNastr.close();
}
void ContTorgi(list<Svecha>& Torg)	// янгдюмхе йнмреимепю онйюгюрекеи рнпцнб
					// упюмемхе онйюгюрекеи рнпцнб нпцюмхгнбюмн йюй
					// яохянй ябевеи, йюфдши щкелемр яохяйю б ябнч
					// нвепедэ яндепфхр яохянй ябевеи лемьецн оепхндю
{
	ifstream FList(AdresLenta + "filelist.txt"); // нрйпшрэ тюик ян яохяйнл мюгбюмхи тюикнб рнпцнб
	list<string> NameLenta; // яохянй мюгбюмхи тюикнб
	string str;

	while (FList >> str)	NameLenta.push_back(str); // гюонкмхрэ яохянй мюгбюмхи тюкнб рнпцнб
	FList.close(); // 

	ifstream FLenta; // 
	string Tiker; // 
	float PrCl = 0.0f; // 
	char ch; // 
	int n = 0; // 
	float Koef = 0.0f; // 
	Svecha Sv; // 

	int G = 0, M = 0, D = 0, Ch = 0; // 
	Torg.push_back(Svecha()); // яохянй цндхвмшу ябевеи
	Torg.back().next.push_back(Svecha()); // леяъвмшу
	Torg.back().next.back().next.push_back(Svecha()); // дмебмшу
	Torg.back().next.back().next.back().next.push_back(Svecha()); // вюянбшу

	for (string Lenta : NameLenta)
	{
		cout << Lenta << endl; // 
		FLenta.open(AdresLenta + Lenta, ios_base::in); // нрйпшрэ тюик рнпцнб
		getline(FLenta, str); // 
		str = ""; // 
		while (FLenta.get(ch))	// йюфдюъ ярпнйю тюикю пюгдекъеряъ мю онйюгюрекх вепег гюоърсч
					// х гюохяшбюеряъ б оепелеммсч йкюяяю Svecha (лхмсрмюъ)
		{
			if (ch != ',' && ch != '\n')
			{
				str += ch; // 
			}
			else
			{
				switch (n)
				{
				case 0:
					Sv.Tiker = str; // рхйеп
					Sv.Period = 'л'; // оепхнд лхмсрю
					break; // 
				case 2:
					Sv.Date = stoi(str) % 1000000; // дюрю
					Sv.God = stoi(str.substr(2, 2)); // дюрю декхряъ мю цнд
					Sv.Mes = Sv.God * 100 + stoi(str.substr(4, 2)); // леяъж
					Sv.Den = Sv.Mes * 100 + stoi(str.substr(6, 2)); // демэ
					break; // 
				case 3:
					Sv.Time = stoi(str) / 100; // бпелъ
					Sv.Chas = Sv.Den * 100 + stoi(str)/10000; // вюяш
					Sv.Min = Sv.Den * 10000 + Sv.Time; // лхмсрш
					break; // 
				case 4:
					Sv.Open = stof(str); // жемю нрйпшрхъ
					break; // 
				case 5:
					Sv.High = stof(str); // люйяхлюкэмюъ жемю
					break; // 
				case 6:
					Sv.Low = stof(str); // лхмхлюкэмюъ
					break; // 
				case 7:
					Sv.Close = stof(str); // жемю гюйпшрхъ
					break; // 
				case 8:
					Sv.Vol = stoi(str); // назел ябевх
					if (Tiker != "")	// еякх ялемхкяъ рхйеп (мнбши йнмрпюйр)
					{
						if (Tiker != Sv.Tiker)
						{
							Tiker = Sv.Tiker; // мнбши рхйеп
							Koef = PrCl - Sv.Open; // онявхрюрэ йнщттхжхемр оепеяверю жем 
						}	// опх ялеме рхйепю жемю ядбхцюеряъ
					}
					else
					{
						Tiker = Sv.Tiker; // 
						G = Sv.God; // 
						M = Sv.Mes; // 
						D = Sv.Den; // 
						Ch = Sv.Chas; // 
					}
					Sv.KoefPer = Koef; // гюохяюрэ йнщттхжхемр оепеяверю йюфдни лхмсрш
					Sv.Open += Koef; // оепеявхрюрэ жемс нрйпшрхъ
					Sv.High += Koef; // люйяхлюкэмсч
					Sv.Low += Koef; // лхмхлюкэмсч
					Sv.Close += Koef; // гюйпшрхъ
					PrCl = Sv.Close; // янупюмхрэ б оепелеммни жемс гюйпшрхъ

					// бярюбхрэ щкелемрш яохяйю (цнд, леяъж, демэ, вюя, лхмсрю)
					if (Sv.Chas != Ch) // еякх ялемхкяъ вюя
					{
						Ch = Sv.Chas; // янупюмхрэ рейсыхи вюя
						Torg.back().next.back().next.back().next.back().ZapPokaz('в'); // гюохяюрэ онйюгюрекх онякедмецн вюяю
						if (Sv.Den != D)	// ялемхкяъ демэ
						{
							D = Sv.Den; // янупюмхрэ рейсыхи демэ
							Torg.back().next.back().next.back().ZapPokaz('д'); // гюохяюрэ онйюгюрекх онякедмецн дмъ
							if (Sv.Mes != M)	// ялемхкяъ леяъж
							{
								M = Sv.Mes; // янупюмхрэ рейсыхи леяъж
								Torg.back().next.back().ZapPokaz('л'); // гюохяюрэ онйюгюрекх онякедмецн леяъжю
								if (Sv.God != G)	// ялемхкяъ цнд
								{
									G = Sv.God; // янупюмхрэ рейсыхи цнд
									Torg.back().ZapPokaz('ц'); // гюохяюрэ онйюгюрекх онякедмецн цндю
									Torg.push_back(Svecha()); // бярюбхрэ мнбсч цнднбсч ябевс
								}
								Torg.back().next.push_back(Svecha()); // бярюбхрэ мнбсч леяъчмсч ябевс
							}
							Torg.back().next.back().next.push_back(Svecha()); // бярюбхрэ мнбсч дмебмсч ябевс
						}
						Torg.back().next.back().next.back().next.push_back(Svecha()); // бярюбхрэ мнбсч вюянбсч ябевс
					}
					Torg.back().next.back().next.back().next.back().next.push_back(Sv); // бярюбхрэ мнбсч лхмсрмсч ябевс
					n = -1; // 
				}
				str = ""; // 
				n++; // 
			}
		}
		FLenta.close(); // 
	}
	// оняке напюанрйх бяеу тюикнб ондахрэ онякедмхе ябевйх
	Torg.back().next.back().next.back().next.back().ZapPokaz('в'); // вюянбюъ
	Torg.back().next.back().next.back().ZapPokaz('д'); // дмебмюъ
	Torg.back().next.back().ZapPokaz('л'); // леяъвмюъ
	Torg.back().ZapPokaz('ц'); // цнднбюъ
}
void ContSv_30(list<Svecha>& TorgList, list<Svecha_30>& svList)	// йнмреимеп 30-рх лхмсрмшу ябевеи, янгдюеряъ хг йнмреимепю рнпцнб
{
	int i; // 
	Svecha_30 sv; // 
	bool Sv_5 = true; // 
	int Time_5; // 
	// онйюгюрекх ябевх хг онйюгюрекеи оепбни лхмсрш
	sv.Tiker = TorgList.front().next.front().next.front().next.front().next.front().Tiker; // рхйеп
	sv.Date = TorgList.front().next.front().next.front().next.front().next.front().Date; // дюрю
	sv.TimeN = TorgList.front().next.front().next.front().next.front().next.front().Time; // бпелъ мювюкю
	sv.Open = TorgList.front().next.front().next.front().next.front().next.front().Open; // жемю нрйпшрхъ
	Time_5 = TorgList.front().next.front().next.front().next.front().next.front().Time; // бпелъ мювюкю оепбни оърхлхмсрйх
	sv.Vol = 0; // назел мскебни
	for (Svecha God : TorgList)	// опнкхярюрэ цндхвмши яохянй
	{
		for (Svecha Mes : God.next)	// опнкхярюрэ леяъвмши яохянй
		{
			for (Svecha Den : Mes.next)	// опнкхярюрэ дмебмни яохянй
			{
				for (Svecha Chas : Den.next)	// опнкхярюрэ вюянбни яохянй
				{
					for (Svecha Minuta : Chas.next)	// опнкхярюрэ лхмсршми яохянй
					{
						if (Sv_5)	// еякх хдер оепбюъ оърхлхмсрйю
						{
							if (Minuta.Time - Time_5 >= 5)	// еякх оепбюъ оърхлхмсрйю гюйнмвхкюяэ
							{
								Sv_5 = false; // оепейкчвюрекэ оепбни оърхлхмсрйх false
								sv.izm_5 = sv.Close - sv.Open; // нопедекхрэ хглемемхе
								if (sv.Close - sv.Open >= 0)	// еякх онкнфхрекэмне
								{
									sv.Oper = 'S'; // ноепюжхъ опндюфю
								}
								else
								{
									sv.Oper = 'B'; // ноепюжхъ онйсойю
								}
							}
						}
						if (sv.Date != Minuta.Date || Minuta.Time - sv.TimeN >= 30)	// еякх 30-лхм. ябевю ялемхкюяэ
						{
							Time_5 = Minuta.Time; // гюохяюрэ рейсысч лхмсрс
							Sv_5 = true; // оепбюъ оърхлхмсрйю б true
							i = Time_5 % 10; // опнбепхрэ бпелъ оепбни оърхлхмсрйх мю йнппейрмнярэ
							if (!(i == 0 || i == 5))
								if (i < 5)		Time_5 = Time_5 - i;	// ЯЙНПЕЙРХПНБЮРЭ БПЕЛЪ ДН 0 МЮ ЙНМЖЕ
								else			Time_5 = Time_5 - i + 5;	// ЯЙНПЕЙРХПНБЮРЭ БПЕЛЪ ДН 5 МЮ ЙНМЖЕ

							svList.push_back(sv); // днаюбхрэ 30-лхм. ябевс
							sv.Tiker = Minuta.Tiker; // рхйеп
							sv.Date = Minuta.Date; // дюрю
							sv.TimeN = Minuta.Time; // бпелъ мювюкю
							sv.Open = Minuta.Open; // нрйпшрхе
							sv.Mes = Minuta.Mes; // леяъж
							sv.KoefPer = Minuta.KoefPer; // йнет. оепеяверю
							sv.Vol = 0; // назел

							i = sv.TimeN % 100; //  опнбепхрэ бпелъ мювюкю ябевх мю йнппейрмнярэ
							if (!(i == 0 || i == 30))
								if (i < 30)		sv.TimeN = sv.TimeN - i;	// ЯЙНПЕЙРХПНБЮРЭ БПЕЛЪ ДН 0 МЮ ЙНМЖЕ
								else			sv.TimeN = sv.TimeN - i + 30;	// ЯЙНПЕЙРХПНБЮРЭ БПЕЛЪ ДН 30 МЮ ЙНМЖЕ
						}
						// еякх ябевю ме ялемхкюяэ
						sv.TimeK = Minuta.Time; // янупюмърэ бпелъ нйнмвюмхъ
						sv.Close = Minuta.Close; // жемс гюйпшрхъ
						sv.Vol += Minuta.Vol; // мюйюокхбюрэ назел
					}
				}
			}
		}
	}
}
void SdvigIter(list<Svecha_30>::iterator& it) // ЯДБХЦ ХРЕПЮРНПЮ МЮ ЛЕЯЪЖ БОЕПЕД
{
	int m = (*it).Date / 100; // бгърэ леяъж
	it++; // ядбхмсрэ хрепюрнп мю якедсчысч лхмсрс
	while ((*it).Date / 100 == m)	// опнкхярюрэ дн якедсчыецн леяъжю
		it++;
}
void ContTochki(list<Svecha>& Torg, map<const int, list<Tochka>>& tochList)	// янгдюмхе йнмреимепю рнвей бундю
{	//рнвйю нопедекъеряъ он назелс 30-лхмсрмни ябевх (еякх назел днярюрнвмн анкэьни)
	list<Svecha_30> svList; // 
	ContSv_30(Torg, svList); // янгдюрэ йнмреимеп 30-лхмсрмшу ябевей

	int mes = svList.front().Mes; // бгърэ леяъж оепбни 30-лхмсрмни ябевх
	int SchMes = 0; // явервхй леяъжеб
	int Date = 0; // дюрю
	map<int, int> Volume; // йнмреимеп назелнб (йнкхвеярбн гю цнд, назел)
	list<Tochka> TochkaList; // 
	list<Svecha_30>::iterator IterStart = svList.begin(); // хрепюрнп мю мювюкн цндхвмнцн оепхндю онхяйю
	list<Svecha_30>::iterator IterFinish = svList.begin(); // хрепюрнп мю йнмеж цндхвмнцн оепхндю онхяйю
	list<Svecha_30>::iterator IterSv_12m; // 
	list<Svecha_30> Sv_12m; // 

	for (Svecha_30 sv : svList)	// опнкхярюрэ яохянй 30-лхм. ябевеи
	{
		if (sv.Mes != mes)	// еякх ялемхкяъ леяъж
		{
			SchMes++; // опхаюбхрэ йнкхвеярбн леяъжеб
			mes = sv.Mes; // янупюмхрэ леяъж
			if (SchMes > KolMesyacev)	// еякх опнкхярюмн анкэье леяъжеб вел KolMesyacev (днярюрнвмн дкъ ноп. лхмхлюкэмнцн назелю цндхвмнцн оепхндю)
			{
				copy(IterStart, IterFinish, back_inserter(Sv_12m)); // яйнохпнбюрэ 30-лхм. ябевйх гю пюяялюрпхбюелши цнд
				Sv_12m.sort([](Svecha_30& s1, Svecha_30& s2) {return s1.Vol > s2.Vol; }); // нрянпрхпнбюрэ он назелс
				Sv_12m.unique([](Svecha_30& s1, Svecha_30& s2) { return s1.Vol == s2.Vol; }); // сдюкхрэ онбрнпъчыхеяъ наелш
				Volume.clear(); // нвхярхрэ опедшдсыхи йнмреимеп назелнб

				for (int el : { 1, 2, 3, 4, 5, 10, 15, 20 })	// йнкхвеярбн люйяхлюкэмшу назелнб гю оепхнд KolMesyacev
				{
					IterSv_12m = Sv_12m.begin(); // сярюмнбхрэ хрепюрнп мю мювюкн яохяйю 30-лхм. ябевей
					advance(IterSv_12m, el - 1); //  // ядбхц хрепюрнпю мю нопедекеммне йнкхвеярбн назелнб (el - 1)
					Volume.emplace(el, (*IterSv_12m).Vol); // бярюбхрэ лхмхлюкэмши назел б оепелеммсч Volume, йкчвэ - йнкхвеярбн назелнб
				}
				Sv_12m.clear(); // нвхярхрэ яохянй 30-лхм. ябевей
				SdvigIter(IterStart); // ядбхмсрэ цндхвмши оепхнд мю ндхм леяъж боепед
			}
		}
		if (!Volume.empty())
		{
			for (auto KolVol : Volume)	// опнкхярюрэ яохянй йнкхвеярбю назелнб
			{
				if (sv.Vol >= KolVol.second)	// еякх назел 30-лхм. ябевйх анкэье лхмхлюкэмн менаундхлнцн
				{
					(*tochList.emplace(KolVol.first, TochkaList).first).second.push_back(sv); // днаюбхрэ 30-лхм. ябевйс б яохянй рнвей бундю б яннрберярбсчыее йнкхвеярбн назелнб
				}
			}
		}
		if (Date != sv.Date && SchMes > KolMesyacev)
		{
			KolDnei++; // ондявхрюрэ йнк дмеи рнпцнбкх
			Date = sv.Date; // 
		}
		IterFinish++; // ядбхцюрэ хрепюрнп йнмжю цндхвмнцн оепхндю
	}
}
void Sort_Po_Otkr(pair<int, list<Tochka>>& Para)	// янпрхпнбйю ядекнй он дюре нрйпшрхъ
{
	Para.second.sort([](const Tochka& T1, const Tochka& T2)
		{
			return ((unsigned int)(T1.DateOpen) * 10000 + T1.TimeOpen < (unsigned int)(T2.DateOpen) * 10000 + T2.TimeOpen); // 
		}); // 
}
void Print(pair<int, list<Tochka>>& SpisokSdelok) // гЮОХЯШБЮЕР Б ТЮИК БЯЕ ЯДЕКЙХ
{
	if (!VseSdelki.is_open())
	{
		string FileName; // 
		FileName = "яДЕКЙХ (O-"; // 
		FileName += to_string(Polz_otkr); // 
		FileName += ",C-"; // 
		FileName += to_string(Polz_ubit); // 
		FileName += ",K-"; // 
		FileName += to_string(Polz_Sniat); // 
		FileName += ",V-"; // 
		FileName += to_string(Polz_kolVol); // 
		FileName += ").txt"; // 
		VseSdelki.open(FileName); // 
		VseSdelki << "Para.first" << '\t' << "Tiker" << '\t' << "Date" << '\t' << "TimeN" << '\t' << "TimeK" << '\t' << "Open" << '\t' << "Close" << '\t' << "Oper" << '\t'; // 
		VseSdelki << "Vol" << '\t' << "izm_5" << '\t' << "PokKill" << '\t' << "PokOpen" << '\t' << "PokClose" << '\t' << "TikerOpen" << '\t'; // 
		VseSdelki << "DateOpen" << '\t' << "TimeOpen" << '\t' << "PriceOpen" << '\t' << "TikerKill" << '\t' << "DateKill" << '\t' << "TimeKill" << '\t'; // 
		VseSdelki << "PriceKill" << '\t' << "TikerCloseU" << '\t' << "DateCloseU" << '\t' << "TimeCloseU" << '\t' << "PriceCloseU" << '\t' << "Sostoyanie" << '\t'; // 
		VseSdelki << "TikerCloseP" << '\t' << "DateCloseP" << '\t' << "TimeCloseP" << '\t' << "PriceCloseP" << '\t' << "Rezult" << '\t' << "Koment" << endl; // 
	}
	for (Tochka& Sdelka : SpisokSdelok.second)
	{
		Sdelka.Open -= Sdelka.KoefPerS; // 
		Sdelka.Close -= Sdelka.KoefPerS; // 
		Sdelka.PriceOpen -= Sdelka.KoefPerOpen; // 
		Sdelka.PriceKill -= Sdelka.KoefPerKill; // 
		Sdelka.PriceCloseU -= Sdelka.KoefPerCloseU; // 
		Sdelka.PriceCloseP -= Sdelka.KoefPerCloseP; // 

		VseSdelki << SpisokSdelok.first << '\t' << Sdelka.Tiker << '\t' << Sdelka.Date << '\t' << Sdelka.TimeN << '\t' << Sdelka.TimeK << '\t' << Sdelka.Open << '\t' << Sdelka.Close << '\t' << Sdelka.Oper << '\t'; // 
		VseSdelki << Sdelka.Vol << '\t' << Sdelka.izm_5 << '\t' << Sdelka.PokKill << '\t' << Sdelka.PokOpen << '\t' << Sdelka.PokClose << '\t' << Sdelka.TikerOpen << '\t'; // 
		VseSdelki << Sdelka.DateOpen << '\t' << Sdelka.TimeOpen << '\t' << Sdelka.PriceOpen << '\t' << Sdelka.TikerKill << '\t' << Sdelka.DateKill << '\t' << Sdelka.TimeKill << '\t'; // 
		VseSdelki << Sdelka.PriceKill << '\t' << Sdelka.TikerCloseU << '\t' << Sdelka.DateCloseU << '\t' << Sdelka.TimeCloseU << '\t' << Sdelka.PriceCloseU << '\t' << Sdelka.Sostoyanie << '\t'; // 
		VseSdelki << Sdelka.TikerCloseP << '\t' << Sdelka.DateCloseP << '\t' << Sdelka.TimeCloseP << '\t' << Sdelka.PriceCloseP << '\t' << Sdelka.Rezult << '\t' << Sdelka.Koment << endl; // 
	}
}
int FindOpen(list<Svecha>& TorgilList, Tochka& Tochka) // онхяй нрйпшрхъ ядекйх
{
	if (Tochka.Oper == 'B')	// еякх ноепюжхъ онйсойю
	{
		for (Svecha& God : TorgilList) // опнкхяршбюрэ цндхвмше ябевйх рнпцнб
		{
			if (God.God >= Tochka.GetVremia('ц', 'S') && (abs(God.High - Tochka.PriceOpen) < 0.000001 || God.High > Tochka.PriceOpen))	// опнбепхрэ бпелъ х люйяхлюкэмсч жемс ябевйх
			{
				for (Svecha& Mes : God.next)	// леяъвмше ябевйх
				{
					if (Mes.Mes >= Tochka.GetVremia('л', 'S') && (abs(Mes.High - Tochka.PriceOpen) < 0.000001 || Mes.High > Tochka.PriceOpen))	// опнбепхрэ бпелъ х люйяхлюкэмсч жемс ябевйх
					{
						for (Svecha& Den : Mes.next)	// дмебмше
						{
							if (Den.Den >= Tochka.GetVremia('д', 'S') && (abs(Den.High - Tochka.PriceOpen) < 0.000001 || Den.High > Tochka.PriceOpen))	// опнбепхрэ бпелъ х люйяхлюкэмсч жемс ябевйх
							{
								for (Svecha& Chas : Den.next)	// вюянбше
								{
									if (Chas.Chas >= Tochka.GetVremia('в', 'S') && (abs(Chas.High - Tochka.PriceOpen) < 0.000001 || Chas.High > Tochka.PriceOpen))	// опнбепхрэ бпелъ х люйяхлюкэмсч жемс ябевйх
									{
										for (Svecha& Minut : Chas.next)	// лхмсрмше
										{
											if (Minut.Min > Tochka.GetVremia('р', 'S') && (abs(Minut.High - Tochka.PriceOpen) < 0.000001 || Minut.High > Tochka.PriceOpen))	// опнбепхрэ бпелъ х люйяхлюкэмсч жемс ябевйх
											{
												Tochka.TikerOpen = Minut.Tiker; // еякх мюидемю лхмсрмюъ ябевйю дюрю йнрнпни анкэье
												Tochka.DateOpen = Minut.Date; // дюрш рнвйх бундю х люйяхлюкэмюъ жемю анкэье жемш 
												Tochka.TimeOpen = Minut.Time; // нрйпшрхъ ядекйх, рн гюохяюрэ рхйеп, дюрс, бпелъ, йнщттхж.
												Tochka.KoefPerOpen = Minut.KoefPer; // оепеяверю нрйпшрхъ ядекйх
												Tochka.PoprPriceOpen = Tochka.PriceOpen - Minut.High;
												return 0; // 
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else if (Tochka.Oper == 'S')	// еякх ноепюжхъ опндюфю, рн опнбепърэ лхмхлюкэмсч жемс ябевх
	{
		for (Svecha& God : TorgilList)
		{
			if (God.God >= Tochka.GetVremia('ц', 'S') && (abs(God.Low - Tochka.PriceOpen) < 0.000001 || God.Low < Tochka.PriceOpen))
			{
				for (Svecha& Mes : God.next)
				{
					if (Mes.Mes >= Tochka.GetVremia('л', 'S') && (abs(Mes.Low - Tochka.PriceOpen) < 0.000001 || Mes.Low < Tochka.PriceOpen))
					{
						for (Svecha& Den : Mes.next)
						{
							if (Den.Den >= Tochka.GetVremia('д', 'S') && (abs(Den.Low - Tochka.PriceOpen) < 0.000001 || Den.Low < Tochka.PriceOpen))
							{
								for (Svecha& Chas : Den.next)
								{
									if (Chas.Chas >= Tochka.GetVremia('в', 'S') && (abs(Chas.Low - Tochka.PriceOpen) < 0.000001 || Chas.Low < Tochka.PriceOpen))
									{
										for (Svecha& Minut : Chas.next)
										{
											if (Minut.Min > Tochka.GetVremia('р', 'S') && (abs(Minut.Low - Tochka.PriceOpen) < 0.000001 || Minut.Low < Tochka.PriceOpen))
											{
												Tochka.TikerOpen = Minut.Tiker; // 
												Tochka.DateOpen = Minut.Date; // 
												Tochka.TimeOpen = Minut.Time; // 
												Tochka.KoefPerOpen = Minut.KoefPer; // 
												Tochka.PoprPriceOpen = Minut.Low - Tochka.PriceOpen;
												return 0; // 
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0; // 
}
int FindKill(list<Svecha>& TorgilList, Tochka& Tochka) // онхяй ямърхъ ядекйх
{
	if (Tochka.Oper == 'B')	// еякх ноепюжхъ онйсойю
	{
		for (Svecha& God : TorgilList) // опнкхяршбюрэ цндхвмше ябевйх рнпцнб
		{
			if (God.God >= Tochka.GetVremia('ц', 'S') && (abs(God.Low - Tochka.PriceKill) < 0.000001 || God.Low < Tochka.PriceKill))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
			{
				for (Svecha& Mes : God.next) // леяъвмше
				{
					if (Mes.Mes >= Tochka.GetVremia('л', 'S') && (abs(Mes.Low - Tochka.PriceKill) < 0.000001 || Mes.Low < Tochka.PriceKill))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
					{
						for (Svecha& Den : Mes.next) // дмебмше
						{
							if (Den.Den >= Tochka.GetVremia('д', 'S') && (abs(Den.Low - Tochka.PriceKill) < 0.000001 || Den.Low < Tochka.PriceKill))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
							{
								for (Svecha& Chas : Den.next) // вюянбше
								{
									if (Chas.Chas >= Tochka.GetVremia('в', 'S') && (abs(Chas.Low - Tochka.PriceKill) < 0.000001 || Chas.Low < Tochka.PriceKill))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
									{
										for (Svecha& Minut : Chas.next) // лхмсрмше
										{
											if (Minut.Min > Tochka.GetVremia('р', 'S') && (abs(Minut.Low - Tochka.PriceKill) < 0.000001 || Minut.Low < Tochka.PriceKill))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
											{
												Tochka.TikerKill = Minut.Tiker; // еякх мюидемю лхмсрмюъ ябевйю дюрю йнрнпни анкэье
												Tochka.DateKill = Minut.Date; // дюрш рнвйх бундю х лхмхлюкэмюъ жемю лемэье жемш 
												Tochka.TimeKill = Minut.Time; // ямърхъ ядекйх, рн гюохяюрэ рхйеп, дюрс, бпелъ, йнщттхж.
												Tochka.KoefPerKill = Minut.KoefPer; // оепеяверю ямърхъ ядекйх
												return 0; //
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else if (Tochka.Oper == 'S')	// еякх ноепюжхъ опндюфю, рн опнбепърэ люйяхлюкэмсч жемс ябевх
	{
		for (Svecha& God : TorgilList)
		{
			if (God.God >= Tochka.GetVremia('ц', 'S') && (abs(God.High - Tochka.PriceKill) < 0.000001 || God.High > Tochka.PriceKill))
			{
				for (Svecha& Mes : God.next)
				{
					if (Mes.Mes >= Tochka.GetVremia('л', 'S') && (abs(Mes.High - Tochka.PriceKill) < 0.000001 || Mes.High > Tochka.PriceKill))
					{
						for (Svecha& Den : Mes.next)
						{
							if (Den.Den >= Tochka.GetVremia('д', 'S') && (abs(Den.High - Tochka.PriceKill) < 0.000001 || Den.High > Tochka.PriceKill))
							{
								for (Svecha& Chas : Den.next)
								{
									if (Chas.Chas >= Tochka.GetVremia('в', 'S') && (abs(Chas.High - Tochka.PriceKill) < 0.000001 || Chas.High > Tochka.PriceKill))
									{
										for (Svecha& Minut : Chas.next)
										{
											if (Minut.Min > Tochka.GetVremia('р', 'S') && (abs(Minut.High - Tochka.PriceKill) < 0.000001 || Minut.High > Tochka.PriceKill))
											{
												Tochka.TikerKill = Minut.Tiker; // 
												Tochka.DateKill = Minut.Date; // 
												Tochka.TimeKill = Minut.Time; // 
												Tochka.KoefPerKill = Minut.KoefPer; // 
												return 0; // 
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0; // 
}
int FindClose(list<Svecha>& TorgilList, Tochka& Tochka) // онхяй гюйпшрхъ ядекйх я сашрйнл
{
	if (Tochka.Oper == 'B')	// еякх ноепюжхъ онйсойю
	{
		for (Svecha& God : TorgilList) // опнкхяршбюрэ цндхвмше ябевйх рнпцнб
		{
			if (God.God >= Tochka.GetVremia('ц', 'O') && (abs(God.Low - Tochka.PriceCloseU) < 0.000001 || God.Low < Tochka.PriceCloseU))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
			{
				for (Svecha& Mes : God.next) // леяъвмше
				{
					if (Mes.Mes >= Tochka.GetVremia('л', 'O') && (abs(Mes.Low - Tochka.PriceCloseU) < 0.000001 || Mes.Low < Tochka.PriceCloseU))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
					{
						for (Svecha& Den : Mes.next) // дмебмше
						{
							if (Den.Den >= Tochka.GetVremia('д', 'O') && (abs(Den.Low - Tochka.PriceCloseU) < 0.000001 || Den.Low < Tochka.PriceCloseU))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
							{
								for (Svecha& Chas : Den.next) // вюянбше
								{
									if (Chas.Chas >= Tochka.GetVremia('в', 'O') && (abs(Chas.Low - Tochka.PriceCloseU) < 0.000001 || Chas.Low < Tochka.PriceCloseU))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
									{
										for (Svecha& Minut : Chas.next) // лхмсрмше
										{
											if (Minut.Min > Tochka.GetVremia('р', 'O') && (abs(Minut.Low - Tochka.PriceCloseU) < 0.000001 || Minut.Low < Tochka.PriceCloseU))	// опнбепхрэ бпелъ х лхмхлюкэмсч жемс ябевйх
											{
												Tochka.TikerCloseU = Minut.Tiker; // еякх мюидемю лхмсрмюъ ябевйю дюрю йнрнпни анкэье
												Tochka.DateCloseU = Minut.Date; // дюрш нрйпшрхъ ядекйх х лхмхлюкэмюъ жемю лемэье жемш 
												Tochka.TimeCloseU = Minut.Time; // гюйпшрхъ ядекйх я сашрйнл, рн гюохяюрэ рхйеп, дюрс,
												Tochka.KoefPerCloseU = Minut.KoefPer; //  бпелъ, йнщттхж. оепеяверю гюйпшрхъ ядекйх я сашрйнл
												Tochka.PoprPriceCloseU = Minut.Low - Tochka.PriceCloseU;
												return 0; //
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else if (Tochka.Oper == 'S')	// еякх ноепюжхъ опндюфю, рн опнбепърэ люйяхлюкэмсч жемс ябевх
	{
		for (Svecha& God : TorgilList)
		{
			if (God.God >= Tochka.GetVremia('ц', 'O') && (abs(God.High - Tochka.PriceCloseU) < 0.000001 || God.High > Tochka.PriceCloseU))
			{
				for (Svecha& Mes : God.next)
				{
					if (Mes.Mes >= Tochka.GetVremia('л', 'O') && (abs(Mes.High - Tochka.PriceCloseU) < 0.000001 || Mes.High > Tochka.PriceCloseU))
					{
						for (Svecha& Den : Mes.next)
						{
							if (Den.Den >= Tochka.GetVremia('д', 'O') && (abs(Den.High - Tochka.PriceCloseU) < 0.000001 || Den.High > Tochka.PriceCloseU))
							{
								for (Svecha& Chas : Den.next)
								{
									if (Chas.Chas >= Tochka.GetVremia('в', 'O') && (abs(Chas.High - Tochka.PriceCloseU) < 0.000001 || Chas.High > Tochka.PriceCloseU))
									{
										for (Svecha& Minut : Chas.next)
										{
											if (Minut.Min > Tochka.GetVremia('р', 'O') && (abs(Minut.High - Tochka.PriceCloseU) < 0.000001 || Minut.High > Tochka.PriceCloseU))
											{
												Tochka.TikerCloseU = Minut.Tiker; // 
												Tochka.DateCloseU = Minut.Date; // 
												Tochka.TimeCloseU = Minut.Time; // 
												Tochka.KoefPerCloseU = Minut.KoefPer; // 
												Tochka.PoprPriceCloseU = Tochka.PriceCloseU - Minut.High;
												return 0; // 
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0; // 
}
void PokStrat(pair<int, list<Tochka>>& SpisokSdelok) // гЮОХЯШБЮЕР Б ТЮИК НАЫХЕ ОНЙЮГЮРЕКХ РНПЦНБКХ ОН ЯРПЮРЕЦХХ
{
	float D_max = 0.0f;		// ЛЮЙЯХЛЮКЭМШИ ДНУНД
	float Prosadka = 0.0f; 		// ЛЮЙЯХЛЮКЭМЮЪ ОПНЯЮДЙЮ
	float Dohod = 0.0f;		// ЙНМЕВМШИ ДНУНД
	int KolSdel = 0;		// ЙНКХВЕЯРБН ЯДЕКНЙ
	float SredSdel = 0.0f; 		// ЯПЕДМЪЪ ДНУНДМНЯРЭ НДМНИ ЯДЕКЙХ
	float MaxUbitSdel = 0.0f;	// ЛЮЙЯХЛЮКЭМШИ САШРНЙ ОН ЯДЕКЙЕ
	float DohodMes = 0.0f; 		// ДНУНД ГЮ ЛЕЯЪЖ
	float Limit = 0.0f;		// КХЛХР ДКЪ РНПЦНБКХ
	float DohodMesProc = 0.0f;	// ДНУНДМНЯРЭ Б ОПНЖЕМРЮУ ГЮ ЛЕЯЪЖ
	float MaxUbitSdelP = 0.0f;	// ЛЮЙЯХЛЮКЭМШИ САШРНЙ ОН ЯДЕКЙЕ Б ОПНЖЕМРЮУ
	float MaxUbitProsP = 0.0f;	// ЛЮЙЯХЛЮКЭМШИ САШРНЙ ОН ОПНЯЮДЙЕ Б ОПНЖЕМРЮУ
	float KoefDohod = 0.0f;		// ЙНЩТТХЖХЕМР ДНУНДМНЯРХ
	float KoefPereschRez = 1.0;	// ЙНЩТТХЖХЕМР ОЕПЕЯВЕРЮ ПЕГСКЭРЮРЮ

	float X = 0.0; // ОЕПЕЛЕММШЕ ДКЪ ОНХЯЙЮ ЙНЩТТХЖХЕМРЮ оХПЯНМЮ
	float Y = 0.0; // 
	float SumX = 0.0; // 
	float SumY = 0.0; // 
	float MX = 0.0; // 
	float MY = 0.0; // 
	float Sum_dXdY = 0.0; // 
	float Sum_dX2 = 0.0; // 
	float Sum_dY2 = 0.0; // 
	float KoefPirson = 0.0; // 

	if (!PS.is_open())	// ЕЯКХ ТЮИК ДКЪ ГЮОХЯХ ОНЙЮГЮРЕКЕИ МЕ НРЙПШР
	{
		string FileName; // 
		if (Strategi == 'y')	// ЕЯКХ МСФМН БШБЕЯРХ НРДЕКЭМСЧ ЯРПЮРЕЦХЧ
		{
			FileName = "яРПЮРЕЦХЪ (O-"; // ЯНГДЮРЭ ЯННДБЕРЯРБСЧЫЕЕ ХЛЪ ТЮИКЮ
			FileName += to_string(Polz_otkr); // 
			FileName += ",C-"; // 
			FileName += to_string(Polz_ubit); // 
			FileName += ",K-"; // 
			FileName += to_string(Polz_Sniat); // 
			FileName += ",V-"; // 
			FileName += to_string(Polz_kolVol); // 
			FileName += ").txt"; // 
			PS.open(FileName); // 
		}
		else
		{
			PS.open("бЯЕ ЯРПЮРЕЦХХ.txt"); // ЕЯКХ МСФМН БШБЕЯРХ БЯЕ ЯРПЮРЕЦХХ
		}
		PS << "KolVol" << '\t'
			<< "PokOpen" << '\t'
			<< "PokClose" << '\t'
			<< "PokKill" << '\t'
			<< "Limit" << '\t'
			<< "KolSdel" << '\t'
			<< "D_max" << '\t'
			<< "Dohod" << '\t'
			<< "SredSdel" << '\t'
			<< "MaxUbitSdel" << '\t'
			<< "MaxUbitSdelP" << '\t'
			<< "Prosadka" << '\t'
			<< "MaxUbitProsP" << '\t'
			<< "DohodMes" << '\t'
			<< "DohodMesProc" << '\t'
			<< "KoefPirson" << '\t'
			<< "KoefDohod" << endl; // БШБЕЯРХ ГЮЦНКНБНЙ НДХМ ПЮГ
	}

	for (Tochka& Sdelka : SpisokSdelok.second)	// ОПНКХЯРЮРЭ БЯЕ ЯДЕКЙХ ОН ЯРПЮРЕЦХХ
	{
		if (Sdelka.Sostoyanie == 'I')	// ЕЯКХ ЯДЕКЙЮ ХЯОНКМЕМЮ
		{
			Dohod += Sdelka.Rezult; // ОНДАХРЭ ДНУНД
			KolSdel++; // ОНЯВХРЮРЭ ЙНКХВЕЯРБН ЯДЕКНЙ ОН ЯРПЮРЕЦХХ
			SumX = SumX + Dohod; // ЯСЛЛЮ у ДКЪ ЙНЩТ. оХПЯНМЮ
			SumY = SumY + KolSdel; // ЯСЛЛЮ Y ДКЪ ЙНЩТ. оХПЯНМЮ
			if (Dohod > D_max)
			{
				D_max = Dohod; // ОНХЯЙ ЛЮЙЯХЛЮКЭМНЦН ДНУНДЮ
			}
			if (Sdelka.Rezult < MaxUbitSdel)
			{
				MaxUbitSdel = Sdelka.Rezult; // ОНХЯЙ ЛЮЙЯХЛЮКЭМНЦН САШРЙЮ ГЮ ЯДЕКЙС
			}
			if (D_max - Dohod > Prosadka)
			{
				Prosadka = D_max - Dohod; // ОНХЯЙ ЛЮЙЯХЛЮКЭМНИ ОПНЯЮДЙХ
			}
		}
	}

	// пюявер йнщттхжхемрю йнппекъжхх охпянмю
	//---------------------------------------
	MX = SumX / KolSdel; // 
	MY = SumY / KolSdel; // 
	for (Tochka& Sdelka : SpisokSdelok.second)
	{
		if (Sdelka.Sostoyanie == 'I')	// 
		{
			X = X + Sdelka.Rezult; // 
			Y = Y + 1.0f; // 
			Sum_dXdY = Sum_dXdY + (X - MX) * (Y - MY); // 
			Sum_dX2 = Sum_dX2 + pow((X - MX), 2); // 
			Sum_dY2 = Sum_dY2 + pow((Y - MY), 2); // 
		}
	}
	KoefPirson = pow(Sum_dXdY / sqrt(Sum_dX2 * Sum_dY2), 2);
	//---------------------------------------

	MaxUbitSdel = abs(MaxUbitSdel); // 
	if ((Prosadka * 100 / DopProsadka) < (MaxUbitSdel * 100 / DopUbitSdel))	// ЕЯКХ ПЮЯВХРЮММШИ НР ЛЮЙЯХЛЮКЭМНИ ОПНЯЮДЙХ КХЛХР ЛЕМЭЬЕ ПЮЯВХРЮММНЦН НР ЛЮЙЯХЛЮКЭМНЦН САШРЙЮ ГЮ ЯДЕКЙС
		Limit = MaxUbitSdel * 100 / DopUbitSdel;			// Б ПЮЯВЕР АЕПЕРЯЪ КХЛХР, ПЮЯВХРЮММШИ НР ЛХМХЛЮКЭМНЦН САШРЙЮ ГЮ ЯДЕКЙС
	else
		Limit = Prosadka * 100 / DopProsadka;				// ХМЮВЕ АЕПЕРЯЪ КХЛХР, ПЮЯВХРЮММШИ НР ЛЮЙЯХЛЮКЭМНИ ОПНЯЮДЙХ
	if ((Prosadka + GarantObesp) > Limit)					// ЕЯКХ ОПНЯЮДЙЮ + ЦЮПЮМРХИМНЕ НАЕЯОЕВЕМХЕ АНКЭЬЕ ПЮЯВХРЮММНЦН КХЛХРЮ
		Limit = Prosadka + GarantObesp;					// БГЪРЭ ЛХМХЛЮКЭМН МЕНАУНДХЛШИ КХЛХР НР ЦЮПЮМРХИМНЦН НАЕЯОЕВЕМХЪ
	if (KolSdel)	// ЕЯКХ ЕЯРЭ УНРЭ НДМЮ ЯДЕКЙЮ ПЮЯВХРЮРЭ МЕНАУНДХЛШЕ ОНЙЮГЮРЕКХ
	{
		SredSdel = Dohod / KolSdel;			// ЯПЕДМЪЪ ДНУНДМНЯРЭ ГЮ ЯДЕКЙС
		DohodMes = Dohod / KolDnei * 21;		// ЯПЕДМХИ ДНУНД ГЮ ЛЕЯЪЖ
		DohodMesProc = DohodMes / Limit * 100;		// ДНУНДМНЯРЭ Б ОПНЖЕМРЮУ ГЮ ЛЕЯЪЖ
		MaxUbitSdelP = MaxUbitSdel / Limit * 100;	// ЛЮЙЯХЛЮКЭМШИ САШРНЙ ОН ЯДЕКЙЕ Б ОПНЖЕМРЮУ
		MaxUbitProsP = Prosadka / Limit * 100;		// ЛЮЙЯХЛЮКЭМШИ САШРНЙ ОН ОПНЯЮДЙЕ Б ОПНЖЕМРЮУ
		if (DohodMes > 0)
		{
			KoefDohod = DohodMes * DohodMesProc; // ЙНЩТТХЖХЕМР ДНУНДМНЯРХ
		}
		else
		{
			KoefDohod = 0; // ЕЯКХ ЯРПЮРЕЦХЪ САШРНВМЮ
		}
	}
	// БШБЕЯРХ ОНЙЮГЮРЕКХ ЯРПЮРЕЦХХ МЮ НДХМ ЙНМРПЮЙР Б ТЮИК
	PS << SpisokSdelok.first << '\t'
		<< SpisokSdelok.second.front().PokOpen << '\t'
		<< SpisokSdelok.second.front().PokClose << '\t'
		<< SpisokSdelok.second.front().PokKill << '\t'
		<< Limit << '\t'
		<< KolSdel << '\t'
		<< D_max << '\t'
		<< Dohod << '\t'
		<< SredSdel << '\t'
		<< MaxUbitSdel << '\t'
		<< MaxUbitSdelP << '\t'
		<< Prosadka << '\t'
		<< MaxUbitProsP << '\t'
		<< DohodMes << '\t'
		<< DohodMesProc << '\t'
		<< KoefPirson << '\t'
		<< KoefDohod << endl; // 

	if (Strategi == 'y')	// ЕЯКХ МСФМН БШБЕЯРХ ЙНМЙПЕРМСЧ ЯРПЮРЕЦХЧ
	{			// ОЕПЕЯВХРЮРЭ ОНЙЮГЮРЕКХ ЯРПЮРЕЦХХ МЮ КХЛХР 100000
		KoefPereschRez = 100000 / Limit; // 
		Limit = 100000; // 
		Dohod *= KoefPereschRez; // 
		Prosadka *= KoefPereschRez; // 
		D_max *= KoefPereschRez; // 
		MaxUbitSdel *= KoefPereschRez; // 
		if (KolSdel)
		{
			SredSdel = Dohod / KolSdel; //
			DohodMes = Dohod / KolDnei * 21; //
			DohodMesProc = DohodMes / Limit * 100; //
			MaxUbitSdelP = MaxUbitSdel / Limit * 100; //
			MaxUbitProsP = Prosadka / Limit * 100; //
			if (DohodMes > 0)
			{
				KoefDohod = DohodMes * DohodMesProc; // 
			}
			else
			{
				KoefDohod = 0; // 
			}
		}
		// бШБЕЯРХ ОНЙЮГЮРЕКХ ЯРПЮРЕЦХХ Б ОЕПЕЯВЕРЕ МЮ 100000
		PS << SpisokSdelok.first << '\t'
			<< SpisokSdelok.second.front().PokOpen << '\t'
			<< SpisokSdelok.second.front().PokClose << '\t'
			<< SpisokSdelok.second.front().PokKill << '\t'
			<< Limit << '\t'
			<< KolSdel << '\t'
			<< D_max << '\t'
			<< Dohod << '\t'
			<< SredSdel << '\t'
			<< MaxUbitSdel << '\t'
			<< MaxUbitSdelP << '\t'
			<< Prosadka << '\t'
			<< MaxUbitProsP << '\t'
			<< DohodMes << '\t'
			<< DohodMesProc << '\t'
			<< KoefPirson << '\t'
			<< KoefDohod << endl; // 
	}
}
void Strategiya(map<const int, list<Tochka>>& TMap, list<Svecha>& TorgilList)
{
	float sn = 0.0f, ot = 0.0f, ub = 0.0f; // 
	Tochka* TekSdelka; // ОЕПЕЛЕММЮЪ ДКЪ УПЮМЕМХЪ ЙНМЙПЕРМНИ ЯДЕКЙХ
	pair<int, list<Tochka>> SpisokSdelok; // ОЕПЕЛЕММЮЪ ДКЪ УПЮМЕМХЪ РЕЙСЫЕЦН ЯОХЯЙЮ ЯДЕКНЙ
	for (pair<const int, list<Tochka>>& element : TMap)
	{
		for (int sniat(1); sniat <= 40; sniat += 1)			// СЯКНБХЕ ЯМЪРХЪ ГЮЪБЙХ (0.1 - 4.0%)
		{
			for (int otkr(1); otkr <= 40; otkr += 1)		// СЯКНБХЕ НРЙПШРХЪ ЯДЕКЙХ (0.1 - 4.0%)
			{
				for (int ubit(1); ubit <= 40; ubit += 1)	// СЯКНБХЕ ГЮЙПШРХЪ ЯДЕКЙХ Я САШРЙНЛ (0.1 - 4.0%)
				{
					if (Strategi == 'y')
					{	// ОНЯВХРЮРЭ ЙНМЙПЕРМСЧ ЯРПЮРЕЦХЧ
						SpisokSdelok.first = (*TMap.find(Polz_kolVol)).first; // ЯЙНОХПНБЮРЭ ЯОХЯНЙ РНВЕЙ БУНДЮ ОН СЙЮГЮММНЛС 
						SpisokSdelok.second = (*TMap.find(Polz_kolVol)).second; // Б Polz_kolVol ЙНКХВЕЯРБС НАЗЕЛНБ ГЮ ЦНД
						sniat = Polz_Sniat; // ХЯОНКЭГЮБЮРЭ ОНЙЮГЮРЕКХ ЯРПЮРЕЦХХ СЙЮГЮММШЕ ОНКЭГНБЮРЕКЕЛ
						otkr = Polz_otkr; // 
						ubit = Polz_ubit; // 
					}
					else
					{	// ОНЯВХРЮРЭ БЯЕ ЯРПЮРЕЦХХ
						SpisokSdelok.first = element.first; // ЯЙНОХПНБЮРЭ ЯОХЯНЙ РНВЕЙ БУНДЮ
						SpisokSdelok.second = element.second; // 
					}
					for (Tochka& Sdelka : SpisokSdelok.second)	// БГЪРЭ ХГ РЕЙСЫЕЦН ЯОХЯЙЮ НРДЕКЭМСЧ ЯДЕКЙС
					{
						Sdelka.PokKill = (float)sniat / 10;	// ГЮОХЯЮРЭ Б РЕЙСЫСЧ ЯДЕКЙС ОНЙЮГЮРЕКЭ ЯМЪРХЪ
						Sdelka.PokOpen = (float)otkr / 10;	// НРЙПШРХЪ
						Sdelka.PokClose = (float)ubit / 10;	// ГЮЙПШРХЪ Я САШРЙНЛ
						sn = floor(sniat * (Sdelka.Close - Sdelka.KoefPerS) / 1000 / ShagCeni) * ShagCeni; // ПЮЯВХРЮРЭ БЕКХВХМС ДБХФЕМХЪ ПШМЙЮ ДКЪ ЯМЪРХЪ ЯДЕКЙХ
						ot = floor(otkr * (Sdelka.Close - Sdelka.KoefPerS) / 1000 / ShagCeni) * ShagCeni; // ДКЪ НРЙПШРХЪ ЯДЕКЙХ
						ub = floor(ubit * (Sdelka.Close - Sdelka.KoefPerS) / 1000 / ShagCeni) * ShagCeni; // ДКЪ ГЮЙПШРХЪ Я САШРЙНЛ
						if (Sdelka.Oper == 'B')	// ЕЯКХ НОЕПЮЖХЪ ОНЙСОЙЮ
						{
							Sdelka.PriceOpen = Sdelka.Close + ot + ShagCeni; // ПЮЯВХРЮРЭ ЖЕМС НРЙПШРХЪ
							Sdelka.PriceKill = Sdelka.Close - sn - ShagCeni; // ЯМЪРХЪ
							Sdelka.PriceCloseU = Sdelka.Close - ub - ShagCeni; // ГЮЙПШРХЪ Я САШРЙНЛ
						}
						else if (Sdelka.Oper == 'S')	// ЕЯКХ НОЕПЮЖХЪ ОПНДЮФЮ
						{
							Sdelka.PriceOpen = Sdelka.Close - ot - ShagCeni; // 
							Sdelka.PriceKill = Sdelka.Close + sn + ShagCeni; // 
							Sdelka.PriceCloseU = Sdelka.Close + ub + ShagCeni; // 
						}
						FindOpen(TorgilList, Sdelka); // МЮИРХ БПЕЛЪ НРЙПШРХЪ
						FindKill(TorgilList, Sdelka); // МЮИРХ БПЕЛЪ ЯМЪРХЪ
						Sdelka.OprSostoyanie(); // НОПЕДЕКХРЭ ЯНЯРНЪМХЕ ЯДЕКЙХ (НРЙПШРЮ, ЕЯКХ ЯМЪРЮ ОНГФЕ НРЙПШРХЪ)
						if (Sdelka.Sostoyanie == 'I')
						{
							FindClose(TorgilList, Sdelka); // ЕЯКХ ЯДЕКЙЮ НРЙПШРЮ, МЮИРХ БПЕЛЪ ГЮЙПШРХЪ Я САШРЙНЛ
						}
					}

					Sort_Po_Otkr(SpisokSdelok); // НРЯНПРХПНБЮРЭ ОН ДЮРЕ НРЙПШРХЪ
					TekSdelka = NULL; // РЕЙСЫЮЪ ЯДЕКЙЮ - ОСЯРН

					for (Tochka& Sdelka : SpisokSdelok.second)	// ЯМНБЮ ОПНКХЯРЮРЭ ЯОХЯНЙ ЯДЕКНЙ
					{
						if (Sdelka.Sostoyanie == 'I')	// ОПНБЕПЪРЭ РНКЭЙН ХЯОНКМЕММШЕ
						{
							if (TekSdelka)	// ЕЯКХ ЕЯРЭ РЕЙСЫЮЪ ЯДЕКЙЮ
							{
								if (TekSdelka->Oper == Sdelka.Oper)	// ЕЯКХ НОЕПЮЖХХ РЕЙСЫЕИ ЯДЕКЙХ Х МНБНИ ЯНБОЮДЮЧР
								{	// ОПНБЕПХРЭ ОПЕБШЬЕМХЕ ОНГХЖХХ
									if (TekSdelka->DateCloseU != 0 && TekSdelka->GetVremia('р', 'U') <= Sdelka.GetVremia('р', 'O')) // РЕЙСЫЮЪ ГЮЙПШРЮ Я САШРЙНЛ ПЮМЭЬЕ НРЙПШРХЪ МНБНИ
									{
										TekSdelka->CalcRezult();	// ОНДАХРЭ ПЕГСКЭРЮР С РЕЙСЫЕИ
										TekSdelka->Koment = "сАШРНЙ";	// 
										TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
									}
									else	// РЕЙСЫЮЪ ГЮЙПШРЮ Я САШРЙНЛ ОНГФЕ НРЙПШРХЪ МНБНИ, ОПНОСЯРХРЭ МНБСЧ, ОПЕБШЬЕМЮ ОНГХЖХЪ
									{
										Sdelka.Sostoyanie = 'K'; // 
										Sdelka.Koment = "оПЕБШЬЕМЮ ОНГХЖХЪ D-"; // 
										Sdelka.Koment += to_string(TekSdelka->DateOpen); // 
										Sdelka.Koment += " T-"; // 
										Sdelka.Koment += to_string(TekSdelka->TimeOpen); // 
									}
								}
								else	// ЕЯКХ НОЕПЮЖХХ РЕЙСЫЕИ ЯДЕКЙХ Х МНБНИ МЕ ЯНБОЮДЮЧР
								{	// ОПНБЕПХРЭ ГЮЙПШРХЕ РЕЙСЫЕИ Я ОПХАШКЭЧ
									switch (TekSdelka->Oper)
									{
									case 'B':	// ЕЯКХ РЕЙСЫЮЪ ЯДЕКЙЮ МЮ ОНЙСОЙС
										if (TekSdelka->DateCloseU != 0 && TekSdelka->GetVremia('р', 'U') < Sdelka.GetVremia('р', 'O')) // РЕЙСЫЮЪ ГЮЙПШРЮ Я САШРЙНЛ ПЮМЭЬЕ НРЙПШРХЪ МНБНИ
										{
											TekSdelka->CalcRezult();	// ОНДАХРЭ ПЕГСКЭРЮР С РЕЙСЫЕИ
											TekSdelka->Koment = "сАШРНЙ"; // 
											TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
										}
										else	// РЕЙСЫЮЪ ГЮЙПШРЮ Я САШРЙНЛ ОНГФЕ НРЙПШРХЪ МНБНИ
										{
											if (TekSdelka->GetVremia('р', 'U') == Sdelka.GetVremia('р', 'O'))	// ЕЯКХ РЕЙСЫЮЪ ГЮЙПШРЮ Я САШРЙНЛ НДМНБПЕЛЕММН Я НРЙПШРХЕЛ МНБНИ
											{	// ОПНБЕПХРЭ ГЮЙПШРХЕ ОН ЖЕМЕ
												if (abs(TekSdelka->PriceCloseU - Sdelka.PriceOpen) > 0.000001 && TekSdelka->PriceCloseU > Sdelka.PriceOpen) // РЕЙСЫЮЪ ГЮЙПШРЮ ПЮМЭЬЕ МНБНИ
												{
													TekSdelka->CalcRezult();	// ОНДАХРЭ ПЕГСКЭРЮР С РЕЙСЫЕИ
													TekSdelka->Koment = "бПЕЛЪ ЯДЕКНЙ ЯНБОЮДЮЕР, САШРНЙ"; // 
													TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
													break; // 
												}
											}
											if (abs(TekSdelka->PriceOpen - Sdelka.PriceOpen) < 0.000001 || TekSdelka->PriceOpen < Sdelka.PriceOpen)
											{	// РЕЙСЫЮЪ ОНЙСОЙЮ НРЙПШРЮ МХФЕ НРЙПШРХЪ МНБНИ ОПНДЮФХ, ОНЙСОЙЮ ГЮЙПШРЮ Я ОПХАШКЭЧ, ГЮОХЯЮРЭ ОНЙЮГЮРЕКХ
												// МНБЮЪ ЯДЕКЙЮ ХЦМНПХПСЕРЯЪ, ЕЯКХ НМЮ НРЙПШРЮ Б ОПЕДЕКЮУ ЖЕМ НРЙПШРХЪ Х ГЮЙПШРХЪ РЕЙСЫЕИ
												TekSdelka->TikerCloseP = Sdelka.TikerOpen; // 
												TekSdelka->DateCloseP = Sdelka.DateOpen; // 
												TekSdelka->TimeCloseP = Sdelka.TimeOpen; // 
												TekSdelka->PriceCloseP = Sdelka.PriceOpen; // 
												TekSdelka->KoefPerCloseP = Sdelka.KoefPerOpen; // 
												TekSdelka->PoprPriceCloseP = Sdelka.PoprPriceOpen;
												TekSdelka->CalcRezult(); // 
												TekSdelka->Koment = "оПХАШКЭ"; // 
												TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
											}
											else	// РЕЙСЫЮЪ ОНЙСОЙЮ НРЙПШРЮ БШЬЕ НРЙПШРХЪ МНБНИ ОПНДЮФХ (Б ОПЕДЕКЮУ НРЙПШРХЕ/ГЮЙПШРХЕ МНБНИ), ОПНОСЯРХРЭ МНБСЧ
											{
												Sdelka.Sostoyanie = 'K'; // 
												Sdelka.Koment = "яМЪРЮ ЮЙРХБМНИ ОНГХЖХЕИ D-"; // 
												Sdelka.Koment += to_string(TekSdelka->DateOpen); // 
												Sdelka.Koment += " T-"; // 
												Sdelka.Koment += to_string(TekSdelka->TimeOpen); // 
											}
										}
										break; // 
									case 'S':	// ЕЯКХ РЕЙСЫЮЪ ЯДЕКЙЮ МЮ ОПНДЮФС (БЯЕ МЮНАНПНР)
										if (TekSdelka->DateCloseU != 0 && TekSdelka->GetVremia('р', 'U') < Sdelka.GetVremia('р', 'O')) // РЕЙСЫЮЪ ГЮЙПШРЮ ПЮМЭЬЕ МНБНИ
										{
											TekSdelka->CalcRezult();	// ОНДАХРЭ ПЕГСКЭРЮР С РЕЙСЫЕИ
											TekSdelka->Koment = "сАШРНЙ"; // 
											TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
										}
										else	// РЕЙСЫЮЪ ГЮЙПШРЮ ОНГФЕ НРЙПШРХЪ МНБНИ
										{
											if (TekSdelka->GetVremia('р', 'U') == Sdelka.GetVremia('р', 'O'))
											{
												if (abs(TekSdelka->PriceCloseU - Sdelka.PriceOpen) > 0.000001 && TekSdelka->PriceCloseU < Sdelka.PriceOpen) // РЕЙСЫЮЪ ГЮЙПШРЮ ПЮМЭЬЕ МНБНИ
												{
													TekSdelka->CalcRezult();	// ОНДАХРЭ ПЕГСКЭРЮР С РЕЙСЫЕИ
													TekSdelka->Koment = "бПЕЛЪ ЯДЕКНЙ ЯНБОЮДЮЕР, САШРНЙ"; // 
													TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
													break; // 
												}
											}
											if (abs(TekSdelka->PriceOpen - Sdelka.PriceOpen) < 0.000001 || TekSdelka->PriceOpen > Sdelka.PriceOpen)
											{	// РЕЙСЫЮЪ ОПНДЮФЮ НРЙПШРЮ БШЬЕ НРЙПШРХЪ МНБНИ ОНЙСОЙХ, ОПНДЮФЮ ГЮЙПШРЮ Я ОПХАШКЭЧ, ГЮОХЯЮРЭ ОНЙЮГЮРЕКХ
												TekSdelka->TikerCloseP = Sdelka.TikerOpen; // 
												TekSdelka->DateCloseP = Sdelka.DateOpen; // 
												TekSdelka->TimeCloseP = Sdelka.TimeOpen; // 
												TekSdelka->PriceCloseP = Sdelka.PriceOpen; // 
												TekSdelka->KoefPerCloseP = Sdelka.KoefPerOpen; // 
												TekSdelka->PoprPriceCloseP = Sdelka.PoprPriceOpen;
												TekSdelka->CalcRezult(); // 
												TekSdelka->Koment = "оПХАШКЭ"; // 
												TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
											}
											else	// РЕЙСЫЮЪ ОПНДЮФЮ НРЙПШРЮ МХФЕ НРЙПШРХЪ МНБНИ ОНЙСОЙХ (Б ОПЕДЕКЮУ НРЙПШРХЕ/ГЮЙПШРХЕ МНБНИ), ОПНОСЯРХРЭ МНБСЧ
											{
												Sdelka.Sostoyanie = 'K'; // 
												Sdelka.Koment = "яМЪРЮ ЮЙРХБМНИ ОНГХЖХЕИ D-"; // 
												Sdelka.Koment += to_string(TekSdelka->DateOpen); // 
												Sdelka.Koment += " T-"; // 
												Sdelka.Koment += to_string(TekSdelka->TimeOpen); // 
											}
										}
									}
								}
							}
							else
							{
								TekSdelka = &Sdelka;	// СЙЮГЮРЭ МНБСЧ ЯДЕКЙС ЙЮЙ РЕЙСЫСЧ
							}
						}
					}
					if (TekSdelka)	// ЙНЦДЮ ОПНКХЯРЮМШ БЯЕ ЯДЕКЙХ, ЕЯКХ ЕЯРЭ РЕЙСЫЮЪ ЯДЕКЙЮ
					{
						if (TekSdelka->DateCloseU == 0)	// ЕЯКХ С РЕЙСЫЕИ МЕ МЮИДЕМЮ ДЮРЮ ГЮЙПШРХЪ Я САШРЙНЛ
						{	// СЙЮГЮРЭ ГЮЙПШРХЕ ОН ОНЯКЕДМЕИ ЯБЕВЙЕ ЯОХЯЙЮ РНПЦНБ
							TekSdelka->TikerCloseP = TorgilList.back().next.back().next.back().next.back().next.back().Tiker; // 
							TekSdelka->DateCloseP = TorgilList.back().next.back().next.back().next.back().next.back().Date; // 
							TekSdelka->TimeCloseP = TorgilList.back().next.back().next.back().next.back().next.back().Time; // 
							TekSdelka->PriceCloseP = TorgilList.back().next.back().next.back().next.back().next.back().Close; // 
							TekSdelka->KoefPerCloseP = TorgilList.back().next.back().next.back().next.back().next.back().KoefPer; // 
							TekSdelka->Koment = "яДЕКЙЮ МЕ ГЮЙПШРЮ"; // 
						}
						else	// ЕЯКХ ГЮЙПШРХЕ Я САШРЙНЛ НОПЕДЕКЕМН, РН ГЮЙПШРЮ Я САШРЙНЛ
						{
							TekSdelka->Koment = "сАШРНЙ"; // 
						}
						TekSdelka->CalcRezult(); // ОНДАХРЭ ПЕГСКЭРЮР
						if (Strategi == 'y')	// ЕЯКХ МСФМН БШБЕЯРХ ЙНМЙПЕРМСЧ ЯРПЮРЕЦХЧ
						{
							Print(SpisokSdelok); // БШБЕЯРХ БЯЕ ЯДЕКЙХ ОН ЯРПЮРЕЦХХ
							PokStrat(SpisokSdelok); // БШБЕЯРХ НАЫХЕ ОНЙЮГЮРЕКХ ЯРПЮРЕЦХХ
							return; // 
						}
						else
						{
							PokStrat(SpisokSdelok);	// БШБЕЯРХ НАЫХЕ ОНЙЮГЮРЕКХ ОН БЯЕЛ ЯРПЮРЕЦХЪЛ
						}
					}
				}
			}
		}
	}
}

int main()
{
	setlocale(LC_ALL, "Russian");	// ВХЯКЮ Я ОКЮБЮЧЫЕИ РНВЙНИ stof НАПЮАЮРШБЮЕР МЕЙНППЕЙРМН
	// СЙЮГЮРЭ ОЮПЮЛЕРПШ ПЮАНРШ ОПНЦПЮЛЛШ
	cout << "бШБЕЯРХ ЯДЕКЙХ ОН ЯРПЮРЕЦХХ? "; // 
	do
	{
		cin >> Strategi; // 
		if (Strategi != 'n' && Strategi != 'y')
		{
			cout << "мЕЙНППЕЙРМШИ ЯХЛБНК! "; // 
		}
		else
		{
			if (Strategi == 'y')
			{
				cout << "бБЕДХРЕ ОНЙЮГЮРЕКЭ ЙНКХВЕЯРБЮ НАЗЕЛНБ: "; // 
				cin >> Polz_kolVol; // 
				cout << "бБЕДХРЕ ОНЙЮГЮРЕКЭ ЯМЪРХЪ: "; // 
				cin >> Polz_Sniat; // 
				cout << "бБЕДХРЕ ОНЙЮГЮРЕКЭ НРЙПШРХЪ: "; // 
				cin >> Polz_otkr; // 
				cout << "бБЕДХРЕ ОНЙЮГЮРЕКЭ САШРЙЮ: "; // 
				cin >> Polz_ubit; // 
			}
			break; // 
		}
	} while (true); // 


	//Strategi = 'y'; // 
	//Polz_Sniat = 8; // 
	//Polz_otkr = 11; // 
	//Polz_ubit = 4; // 
	//Polz_kolVol = 20; // 

	setlocale(LC_ALL, "C"); // ДКЪ ЙНППЕЙРМНИ ПЮАНРШ Я РХОНЛ float
	list<Svecha> Torgi; // 
	map<const int, list<Tochka>> Tochki; // 
	Nastroika(); // МЮЯРПНИЙЮ ПЮАНРШ ОПНЦПЮЛЛШ ХГ ТЮИКЮ
	ContTorgi(Torgi); // ЯНГДЮРЭ ЯОХЯНЙ РНПЦНБ
	ContTochki(Torgi, Tochki); // 
	Strategiya(Tochki, Torgi); // 

	PS.close(); // 
	VseSdelki.close(); // 
	return 0; // 
}